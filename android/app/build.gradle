plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.secure_scan_app"
    compileSdk = 35
    ndkVersion = flutter.ndkVersion

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17

        coreLibraryDesugaringEnabled true
    }


    kotlinOptions {
        jvmTarget = '17'
    }



    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.secure_scan_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 26
        targetSdk = 35
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation("com.google.mlkit:barcode-scanning:17.3.0")

    implementation("androidx.camera:camera-core:1.4.1")
    implementation("androidx.camera:camera-camera2:1.4.1")
    implementation("androidx.camera:camera-lifecycle:1.4.1")
    implementation("androidx.camera:camera-view:1.3.0")
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.activity:activity:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'

    // Room Database
    implementation "androidx.room:room-runtime:2.6.1"
    implementation 'androidx.test:core-ktx:1.6.1'
    implementation 'androidx.test.ext:junit-ktx:1.2.1'
    kapt "androidx.room:room-compiler:2.6.1" // KAPT para generar código de Room
    implementation "androidx.room:room-ktx:2.6.1" // Extensiones para usar coroutines con Room

    // ViewModel y LiveData (Parte de Jetpack)
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.6.2"

    // Flow y Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // Dependencias para la inyección de ViewModel (opcional)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.6.2"

    implementation "androidx.core:core-ktx:1.13.0"

    // Mocking for unit tests
    testImplementation "org.mockito:mockito-core:5.4.0"
    testImplementation "io.mockk:mockk:1.13.2"
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.0.0"

    // JUnit for testing
    testImplementation "junit:junit:4.13.2"

    testImplementation 'org.robolectric:robolectric:4.10.3'


    // Coroutines Testing
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3"


    def hilt = "2.51.1"
    implementation "com.google.dagger:hilt-android:$hilt"
    kapt "com.google.dagger:hilt-android-compiler:$hilt"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
}


